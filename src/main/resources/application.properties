spring.application.name=clienteapi

# PostgreSQL Database Configuration (DEFAULT)
spring.datasource.url=jdbc:postgresql://localhost:5432/clientedb
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# H2 Database Configuration
spring.h2.console.enabled=false
#spring.h2.console.path=/h2-console
#spring.datasource.url=jdbc:h2:mem:clientedb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true

# RabbitMQ Configuration
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# JWT Configuration
# Em um projeto real, usaria uma chave muito mais complexa e n√£o ficaria salva dessa forma
api.jwt.secret=minha-chave-secreta-super-longa-e-segura-para-gerar-tokens
api.jwt.expiration=3600000